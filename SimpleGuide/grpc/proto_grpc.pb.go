// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: grpc/proto.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RegisterClientClient is the client API for RegisterClient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RegisterClientClient interface {
	RegisterToServer(ctx context.Context, in *Request, opts ...grpc.CallOption) (RegisterClient_RegisterToServerClient, error)
	PopulateChatMessage(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (*ErrorMessage, error)
}

type registerClientClient struct {
	cc grpc.ClientConnInterface
}

func NewRegisterClientClient(cc grpc.ClientConnInterface) RegisterClientClient {
	return &registerClientClient{cc}
}

func (c *registerClientClient) RegisterToServer(ctx context.Context, in *Request, opts ...grpc.CallOption) (RegisterClient_RegisterToServerClient, error) {
	stream, err := c.cc.NewStream(ctx, &RegisterClient_ServiceDesc.Streams[0], "/simpleguide.registerClient/registerToServer", opts...)
	if err != nil {
		return nil, err
	}
	x := &registerClientRegisterToServerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RegisterClient_RegisterToServerClient interface {
	Recv() (*ResponsMessage, error)
	grpc.ClientStream
}

type registerClientRegisterToServerClient struct {
	grpc.ClientStream
}

func (x *registerClientRegisterToServerClient) Recv() (*ResponsMessage, error) {
	m := new(ResponsMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *registerClientClient) PopulateChatMessage(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (*ErrorMessage, error) {
	out := new(ErrorMessage)
	err := c.cc.Invoke(ctx, "/simpleguide.registerClient/populateChatMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegisterClientServer is the server API for RegisterClient service.
// All implementations must embed UnimplementedRegisterClientServer
// for forward compatibility
type RegisterClientServer interface {
	RegisterToServer(*Request, RegisterClient_RegisterToServerServer) error
	PopulateChatMessage(context.Context, *ChatMessage) (*ErrorMessage, error)
	mustEmbedUnimplementedRegisterClientServer()
}

// UnimplementedRegisterClientServer must be embedded to have forward compatible implementations.
type UnimplementedRegisterClientServer struct {
}

func (UnimplementedRegisterClientServer) RegisterToServer(*Request, RegisterClient_RegisterToServerServer) error {
	return status.Errorf(codes.Unimplemented, "method RegisterToServer not implemented")
}
func (UnimplementedRegisterClientServer) PopulateChatMessage(context.Context, *ChatMessage) (*ErrorMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PopulateChatMessage not implemented")
}
func (UnimplementedRegisterClientServer) mustEmbedUnimplementedRegisterClientServer() {}

// UnsafeRegisterClientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RegisterClientServer will
// result in compilation errors.
type UnsafeRegisterClientServer interface {
	mustEmbedUnimplementedRegisterClientServer()
}

func RegisterRegisterClientServer(s grpc.ServiceRegistrar, srv RegisterClientServer) {
	s.RegisterService(&RegisterClient_ServiceDesc, srv)
}

func _RegisterClient_RegisterToServer_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RegisterClientServer).RegisterToServer(m, &registerClientRegisterToServerServer{stream})
}

type RegisterClient_RegisterToServerServer interface {
	Send(*ResponsMessage) error
	grpc.ServerStream
}

type registerClientRegisterToServerServer struct {
	grpc.ServerStream
}

func (x *registerClientRegisterToServerServer) Send(m *ResponsMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _RegisterClient_PopulateChatMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisterClientServer).PopulateChatMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/simpleguide.registerClient/populateChatMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisterClientServer).PopulateChatMessage(ctx, req.(*ChatMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// RegisterClient_ServiceDesc is the grpc.ServiceDesc for RegisterClient service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RegisterClient_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "simpleguide.registerClient",
	HandlerType: (*RegisterClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "populateChatMessage",
			Handler:    _RegisterClient_PopulateChatMessage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "registerToServer",
			Handler:       _RegisterClient_RegisterToServer_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "grpc/proto.proto",
}
